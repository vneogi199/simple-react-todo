{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","appList","this","updatedList","push","setState","filter","item","map","val","input","src","logo","alt","className","width","height","role","aria-label","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","key","checked","toggleItem","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"sTAkIeA,G,wBA/GX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GACTC,KAAM,IAJK,E,qEAQXC,GACJ,GAAkB,KAAdA,EAAkB,CAClB,IAAMF,EAAU,CACZG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAENC,EAAUC,KAAKV,MACfW,EAAW,YAAOF,EAAQP,MAChCS,EAAYC,KAAKX,GACjBS,KAAKG,SAAS,CACVX,KAAMS,EACNV,QAAS,Q,iCAKVG,GAAK,IACJF,EAASQ,KAAKV,MAAdE,KAEFS,EADO,YAAOT,GACQY,OAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOA,IACvDM,KAAKG,SAAS,CACVX,KAAMS,M,iCAIHP,GAAK,IAENO,EADWD,KAAKV,MAAdE,KACiBc,IAAI,SAAAC,GACzB,OAAIA,EAAIb,KAAOA,EACHa,EAAIT,QAAUS,EAAIT,OAEvBS,IAEXP,KAAKG,SAASF,K,kCAGNO,GACRR,KAAKG,SAAS,CACVZ,QAASiB,M,+BAIP,IAAD,SACqBR,KAAKV,MAAvBE,EADH,EACGA,KAAMD,EADT,EACSA,QACd,OACI,6BACI,yBAAKkB,IAAKC,IAAMC,IAAI,OAAOC,UAAU,kBAAkBC,MAAM,MAAMC,OAAO,QAC1E,wBAAIF,UAAU,0BAAd,wBAC0B,IACtB,0BAAMG,KAAK,MAAMC,aAAW,eAA5B,iBAIJ,yBAAKJ,UAAU,8BAAf,iBAEI,6BACA,2BACIK,KAAK,OACLL,UAAU,wBACVM,YAAY,eACZC,UAAQ,EACRtB,MAAON,EACP6B,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAO1B,UAE7C,4BACIoB,KAAK,SACLL,UAAU,8BACVY,QAAS,kBAAM,EAAKC,QAAQlC,IAC5BmC,UAAWnC,EAAQoC,QAJvB,YAQA,yBAAKf,UAAU,aACX,wBAAIA,UAAU,iBACTpB,EAAKc,IAAI,SAAAD,GAAI,OACV,wBAAIuB,IAAKvB,EAAKX,GAAIkB,UAAU,yBACxB,2BACIK,KAAK,WACLL,UAAU,6BACViB,QAASxB,EAAKP,OACdsB,SAAU,WACN,EAAKU,WAAWzB,EAAKX,OAG7B,0BAAMkB,UAAWP,EAAKP,OAAS,YAAc,IAAKO,EAAKR,OACvD,4BACIoB,KAAK,SACLL,UAAU,6BACVY,QAAS,kBAAM,EAAKO,WAAW1B,EAAKX,MAHxC,qB,GA/FlBsC,IAAMC,YCNJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5151a39d.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// Functional Component for reference\n// function App() {\n//     return (\n//         <div className=\"App\">\n//             <header className=\"App-header\">\n//                 <img src={logo} alt=\"logo\" className=\"App-logo\" />\n//                 <p>Learning React functional</p>\n//             </header>\n//         </div>\n//     );\n// }\n\n// Class based component\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newItem: '',\n            list: [],\n        };\n    }\n\n    addItem(todoValue) {\n        if (todoValue !== '') {\n            const newItem = {\n                id: Date.now(),\n                value: todoValue,\n                isDone: false,\n            };\n            const appList = this.state;\n            const updatedList = [...appList.list];\n            updatedList.push(newItem);\n            this.setState({\n                list: updatedList,\n                newItem: '',\n            });\n        }\n    }\n\n    deleteItem(id) {\n        const { list } = this.state;\n        const newList = [...list];\n        const updatedList = newList.filter(item => item.id !== id);\n        this.setState({\n            list: updatedList,\n        });\n    }\n\n    toggleItem(id) {\n        const { list } = this.state;\n        const updatedList = list.map(val => {\n            if (val.id === id) {\n                return (val.isDone = !val.isDone);\n            }\n            return val;\n        });\n        this.setState(updatedList);\n    }\n\n    updateInput(input) {\n        this.setState({\n            newItem: input,\n        });\n    }\n\n    render() {\n        const { list, newItem } = this.state;\n        return (\n            <div>\n                <img src={logo} alt=\"logo\" className=\"d-block mx-auto\" width=\"200\" height=\"200\" />\n                <h1 className=\"text-white text-center\">\n                    Simple React Todo app{' '}\n                    <span role=\"img\" aria-label=\"wink-smiley\">\n                        ðŸ˜‰\n                    </span>\n                </h1>\n                <div className=\"container text-white w-100\">\n                    Add an Item...\n                    <br />\n                    <input\n                        type=\"text\"\n                        className=\"input-text w-100 my-3\"\n                        placeholder=\"Write a Todo\"\n                        required\n                        value={newItem}\n                        onChange={e => this.updateInput(e.target.value)}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-info btn-block my-3\"\n                        onClick={() => this.addItem(newItem)}\n                        disabled={!newItem.length}\n                    >\n                        Add Todo\n                    </button>\n                    <div className=\"list my-3\">\n                        <ul className=\"list-unstyled\">\n                            {list.map(item => (\n                                <li key={item.id} className=\"my-4 font-weight-bold\">\n                                    <input\n                                        type=\"checkbox\"\n                                        className=\"text-primary mx-1 checkbox\"\n                                        checked={item.isDone}\n                                        onChange={() => {\n                                            this.toggleItem(item.id);\n                                        }}\n                                    />\n                                    <span className={item.isDone ? 'completed' : ''}>{item.value}</span>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-danger float-right\"\n                                        onClick={() => this.deleteItem(item.id)}\n                                    >\n                                        Delete\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}